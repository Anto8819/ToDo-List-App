
// Reducer using createReducer from Redux toolkit
// benefits: don't have to put the default case
// .addCase can receive eiher a string or an action creator generated by creteAction 
// importante si hago una copia tengo que poner el return adelante, porque sino la funcion me retorna el state por default
//si modifico el state como state.push, no tengo que hacer return

import { createReducer } from '@reduxjs/toolkit';

const initialState = [];

const todos = createReducer(initialState, (builder)=>{
  builder
    .addCase('AddTodo', (state,action)=>{
       state.push(action.payload) //o return [...state, action.payload] 
    })
    .addCase('RemoveTodo', (state,action)=>{
      return state.filter(t=>t.id !== action.payload)
    })
    .addCase('ToInProgress',(state,action)=>{
      state.map( t =>{
                if(t.id === action.payload){
                  t.status = 'In Progress'
                }
                return t;
              })
    })
    .addCase('ToDone',(state,action)=>{
      state.map( t =>{
                if(t.id === action.payload){
                  t.status = 'Done'
                }
                return t;
              })
    })

})

export default todos;





//Reducer using createSlice from Redux toolkit, no funciono, verificar

// import { createSlice } from '@reduxjs/toolkit';

// const initialState = [];

// const todos = createSlice({
//   name: 'todos',
//   initialState,
//   reducer:{
//     'AddTodo':(state,action)=>{
//       state.push(action.payload)
//       return state
//     },
//     RemoveTodo:(state,action)=>{
//       return state.filter(t=>t.id !== action.payload)
//     },
//     ToInProgress:(state,action) =>{
//       state.map( t =>{
//                   if(t.id === action.payload){
//                   t.status = 'InProgress'
//                   }
//                   return t;
//                 })
//     },
//     ToDone:(state,action) =>{
//       state.map( t =>{
//                   if(t.id === action.payload){
//                   t.status = 'Done'
//                   }
//                   return t;
//                 })
//   }
// }})

// export const { addTodo, RemoveTodo, ToInProgress, ToDone } = todos.actions
// export default todos.reducer




//Reducer as from Redux 
// const initialState = [];

// //En nuestro estado guardaremos objetos con `todos`. Cada todo tendra: title, description, place, date, id y un status;
// const todos = (state = initialState, action) => {
//   switch(action.type) {
//     // Aca va tu codigo;
//     case 'AddTodo':
//       return [
//         ...state,
//         action.payload
//       ]

//     case 'RemoveTodo':
//       return state.filter( t => t.id !== action.payload)

//     case 'ToInProgress':
//       return state.map( t =>{
//         if(t.id === action.payload){
//           t.status = 'InProgress'
//         }
//         return t;
//       })

//     case 'ToDone':
//       return state.map( t =>{
//         if(t.id === action.payload){
//           t.status = 'Done'
//         }
//         return t;
//       })

//     default:
//       return state;
//   }
// }

// export default todos;
